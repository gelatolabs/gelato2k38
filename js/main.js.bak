function init(m) {
    mode = m;
    version = "2K38"
    buildDate = "October 4, 2021"

    wisdoms = [
        "Oh no, looks like you don't have video drivers installed!",
        "Sometimes I show up for no reason at all! Like right now!",
        "Oh no, Looks like you’re missing video drivers! You’re gonna need those, unless you want to live your life in this green text world like me! You might want to find what card is in this thing!",
        "Sometimes I show up for no reason at all! Like right now!",
        "Yup! No idea what that thing is! Good thing there’s an App For That! Put that number thingy into the “devicelook” command and see what it gives you!",
        "Oh boy… somebody’s got Chlamydia! And probably paid a lot to get it… but not enough to not get it? Guess I shouldn’t judge, my tail’s never been bent…\n\n\rAnyway, you’re gonna have a “fun” time with that. Let’s just get you onto the basic drivers. It won’t be pretty, but it’ll at least get us in the right direction. Go find the driver list and install the right one.  I’d help you, but I hate being in text form!"
    ];

    bootTime = new Date();
    console.log("foo1");
    updateClock();
    setInterval(updateClock, 1000);

    startTime = localStorage.getItem("startTime");
    if (startTime == null) {
        startTime = new Date();
        localStorage.setItem("startTime", startTime);
    }

    dispDrv = localStorage.getItem("dispDrv");
    if (dispDrv == null) {
        dispDrv = "none";
        localStorage.setItem("dispDrv", dispDrv);
    }
    switch (dispDrv) {
        case "aaaaaaaaaaa":
        case "basicdic":
        case "cats":
        case "cga":
        case "matrox":
        case "mach":
        case "poop":
        case "ps2x":
        case "ps3x":
        case "radvid":
            document.body.classList.add("crt");
            document.body.style.filter = "hue-rotate(180deg) blur(0.5px) brightness(2) contrast(8) saturate(100)";
    }

    clippiPhase = parseInt(localStorage.getItem("clippiPhase"));
    if (isNaN(clippiPhase)) {
        clippiPhase = 0;
        localStorage.setItem("clippiPhase", clippiPhase);
    }

    localStorage.setItem("/", "d");
    localStorage.setItem("/Images", "d");
    localStorage.setItem("/Images/crycat.jpg", ["f", "image"]);
    localStorage.setItem("/Music", "d");
    localStorage.setItem("/Music/bluesky.mp3", ["f", "audio"]);
    localStorage.setItem("/hello.txt", ["f", "plain", "Hello,\nworld!"]);

    setInterval(function() {
        randomEvent = Math.floor(Math.random() * 100);
        if (randomEvent == 0) {
            window.location.href = "gsod.html";
        }
        else if (randomEvent < 5) {
            var clippiPhaseOrig = clippiPhase;
            localStorage.setItem("clippiPhase", 1);
            clippi();
            localStorage.setItem("clippiPhase", clippiPhaseOrig);
        }
    }, 15000);

    if (mode == "gde") {
        document.addEventListener("keyup", (e) => {
            if (e.code === "Escape") {
               toggleStart();
            }
        });

        clickSnd = new Audio("assets/sound/click.ogg");
        document.addEventListener("click", () => {
            clickSnd.play();
        }, true);
    }
}

function commandHandler(term, echo, input) {
    args = input.split(' ').filter(function(str) {
        return /\S/.test(str);
    });
    cmd = args.shift();

    if (cmd in commands) {
        commands[cmd].run(args, term, echo);
    }
    if (input.length > 0) {
        term.history.push(input);
    }
}

function autocomplete(index, tokens, term) {
    if (index == 0) return commands.map((cmds) => cmds[0]);

    switch(tokens[0]) {
        case "help":
        case "man":
            return commands.map((cmds) => cmds[0]);
            break;

        case "cd":
        case "mkdir":
            if (index > 1) {
                return [];
            }

            var files = [];
            for (var i = 0; i < localStorage.length; i++) {
                files.push(localStorage.key(i));
            }
            files.sort();

            var matches = [];
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var parent = file.substr(0, file.lastIndexOf("/")).replace(/^$/, '/');
                if (parent == term.pwd && parent != file && localStorage.getItem(file) == "d") {
                    matches.push(file.substr(file.lastIndexOf("/") + 1) + "/");
                }
            }
            return matches;
            break;

        case "ls":
        case "rm":
            if (index > 1) {
                return [];
            }

            var files = [];
            for (var i = 0; i < localStorage.length; i++) {
                files.push(localStorage.key(i));
            }
            files.sort();

            var matches = [];
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var parent = file.substr(0, file.lastIndexOf("/")).replace(/^$/, '/');
                if (parent == term.pwd && parent != file) {
                    if (localStorage.getItem(file) == "d") {
                        matches.push(file.substr(file.lastIndexOf("/") + 1) + "/");
                    } else if (file.startsWith("/")) {
                        matches.push(file.substr(file.lastIndexOf("/") + 1));
                    }
                }
            }
            return matches;
            break;

        case "cat":
            if (index > 1) {
                return [];
            }

            var files = [];
            for (var i = 0; i < localStorage.length; i++) {
                files.push(localStorage.key(i));
            }
            files.sort();

            var matches = [];
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var parent = file.substr(0, file.lastIndexOf("/")).replace(/^$/, '/');
                if (parent == term.pwd && parent != file && localStorage.getItem(file).startsWith(["f", "plain"])) {
                    matches.push(file.substr(file.lastIndexOf("/") + 1));
                }
            }
            return matches;
            break;

        case "pview":
            if (index > 1) {
                return [];
            }

            var files = [];
            for (var i = 0; i < localStorage.length; i++) {
                files.push(localStorage.key(i));
            }
            files.sort();

            var matches = [];
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var parent = file.substr(0, file.lastIndexOf("/")).replace(/^$/, '/');
                if (parent == term.pwd && parent != file && localStorage.getItem(file) == ["f", "image"]) {
                    matches.push(file.substr(file.lastIndexOf("/") + 1));
                }
            }
            return matches;
            break;

        case "sndplay":
            if (index > 1) {
                return [];
            }

            var files = [];
            for (var i = 0; i < localStorage.length; i++) {
                files.push(localStorage.key(i));
            }
            files.sort();

            var matches = [];
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var parent = file.substr(0, file.lastIndexOf("/")).replace(/^$/, '/');
                if (parent == term.pwd && parent != file && localStorage.getItem(file) == ["f", "audio"]) {
                    matches.push(file.substr(file.lastIndexOf("/") + 1));
                }
            }
            return matches;
            break;

        default:
            return [];
            break;
    }
}

function traversePath(pwd, path) {
    return traversePathArr(pwd, path.replace(/\/$/, "").split("/"));
}
function traversePathArr(pwd, path) {
    if (path.length == 0) {
        return pwd.replace(/\/+/g, '/').replace(/^$/, '/');
    }

    switch (path[0]) {
        case "":
            return traversePathArr("/", path.slice(1));
            break;

        case "..":
            return traversePathArr(pwd.substr(0, pwd.lastIndexOf("/")), path.slice(1));
            break;

        case ".":
            return traversePathArr(pwd, path.slice(1));
            break;

        default:
            return traversePathArr(pwd + "/" + path[0], path.slice(1));
            break;
    }
}

function termKeyEvent(e, term, echo) {
    if (e.key == '\x0c') {
        // Ctrl-L -> clear screen
        echo.abortRead("clear");
        echo.print('\x9B2J\x9BH');
    }
}

function spawnBrowser(url) {
    url = url ? url : 'https://2k38wiki.gelatolabs.xyz/start';
    var browserWin = new WinBox({
        title: '<img src="assets/images/mozzarella-logo.png" /> <span>Mozzarella</span>',
        width: Math.min(800, document.body.clientWidth-6),
        height: Math.min(600, document.body.clientHeight-54),
        html: `<div class="browser">
                   <form>
                       <button class="home" type="button" onclick="return browserHome(this)">Home</button><input type="text" placeholder="Enter a URL"><button class="go" onclick="return browserNav(this)">Go</button>
                   </form>
                   <iframe sandbox="allow-forms allow-scripts allow-same-origin" src="${url}"></iframe>
               </div>`
    });
}

async function spawnTerm() {
    const term = new Terminal({
        theme: {
            foreground: '#0F0'
        }
    });
    const termFit = new FitAddon.FitAddon();
    const localEcho = new LocalEchoController();
    term.loadAddon(termFit);

    var termWin = new WinBox({
        title: '<img src="assets/images/gelatoterm-logo.png" /> <span>GelatoTerm</span>',
        class: ['termWin'],
        width: Math.min(600, document.body.clientWidth-6),
        height: Math.min(400, document.body.clientHeight-54),
        onresize: (width, height) => { termFit.fit(width-2, height-33) },
        html: '<div class="term"></div>'
    });

    term.open(termWin.body.firstChild);
    term.loadAddon(localEcho);
    termFit.fit(termWin.width-2, termWin.height-33);
    term.focus();

    term.history = [];
    term.pwd = "/";

    localEcho.addAutocompleteHandler(autocomplete, term);

    term.onKey(e => {input = termKeyEvent(e, term, localEcho)});

    localEcho.println("Welcome to the Gelato System. Type 'help' for help.");

    while (true) {
        await localEcho.read(term.pwd + "> ")
            .then(input => commandHandler(term, localEcho, input))
            .catch(error => void(0));
    }
}

async function spawnClippi(wisdom) {
    var clippiWin = new WinBox({
        class: ['clippiWin'],
        x: 0,
        y: document.body.clientHeight-Math.min(300, document.body.clientHeight-54),
        width: Math.min(200, document.body.clientWidth-6),
        height: Math.min(300, document.body.clientHeight-54),
        html: `<div class="wisdom">${wisdom}</div><img class="clippi" src="assets/images/clippi.png" />`
    });
}

function spawnAbout() {
    var aboutWin = new WinBox({
        title: '<img src="assets/images/about-logo.png" /> <span>About Gelato System</span>',
        width: Math.min(250, document.body.clientWidth-6),
        height: Math.min(500, document.body.clientWidth-54),
        html: `<div id="about" style="height:100%;width:100%;background:#c0c0c0;">
                   <p style="text-align:center;font-size:20pt;margin-top:0;margin-bottom:10px;padding-top:10px;">Gelato System</p>
                   <p style="text-align:center;font-size:14pt;margin-top:0;margin-bottom:10px;padding-top:10px;">Version: `+version+`</p>
                   <p style="text-align:center;font-size:14pt;margin-top:0;margin-bottom:10px;padding-top:10px;">Build Date: `+buildDate+`</p>
                   <img src="assets/images/gelato-logo.png" style="width:60%;margin-left:20%;margin-right:20%;" />
                   <div class="scroll-up">
                       <p>Made for Ludum Dare 49: "Unstable"<br>
                       <br>
                       The Gelato-Labs "G-Team" is:<br>
                       Kyle Farwell (kfarwell)<br>
                       Matthew Petry (fireTwoOneNine)<br>
                       Ryan Refcio<br></p>
                   </div>
               </div>`
    })
}

function spawnPhotoView(file) {
    var photoURL = "fs_elements/" + file;
    var photoPath = file.split('/');
    var photoID = photoPath[photoPath.length - 1].split('.')[0]
    var photoWin = new WinBox({
        title: '<img src="assets/images/wanderingeye-logo.png" /> <span>Wandering Eye</span>',
        html: '<img id="'+photoID+'" src="../'+photoURL+'" />'
    });
    winSizeHelper(photoWin);
}

function spawnAudioPlayer(file) {
    var audioURL = "fs_elements/" + file;
    var audioPath = file.split('/');
    var audioID = audioPath[audioPath.length - 1].split('.')[0]
    var audioWin = new WinBox({
        title: '<img src="assets/images/soundgoblin-logo.png" /> <span>Sound Goblin</span>',
        html: '<audio controls id="'+audioID+'" src="../'+audioURL+'" autoplay/>'
    });
    winSizeHelper(audioWin);
}

async function winSizeHelper(win) {
    var child = win.g.getElementsByClassName("wb-body")[0].firstChild;

    if (child.offsetWidth > 0) {
        win.resize(child.offsetWidth + 2, child.offsetHeight + 33);
    } else {
        setTimeout(function () {
            winSizeHelper(win);
        }, 100);
    }
}

function browserNav(browser) {
    url = browser.previousSibling.value;
    if (!/^https?:\/\//i.test(url)) {
        url = 'https://' + url;
    }
    browser.parentElement.nextSibling.nextSibling.src = url;
    browser.previousSibling.value = '';
    return false; // don't submit form
}
function browserHome(browser) {
    browser.parentElement.nextSibling.nextSibling.src = "https://2k38wiki.gelatolabs.xyz/start";
    return false;
}

function toggleStart() {
    if (localStorage.getItem("fixedstart") == 1) {
        var startmenu = document.getElementById('gde-startmenu-real');
        var notstartmenu = document.getElementById('gde-startmenu-404');
    } else {
        var startmenu = document.getElementById('gde-startmenu-404');
        var notstartmenu = document.getElementById('gde-startmenu-real');
    }

    if (startmenu.style.display == "block" || notstartmenu.style.display == "block") {
        startmenu.style.display = "none";
    } else {
        startmenu.style.display = "block";
    }
    notstartmenu.style.display = "none";
}

function clippi() {
    wisdom = wisdoms[parseInt(localStorage.getItem("clippiPhase"))];

    if (mode == "gde") {
        var oldClippies = document.getElementsByClassName("clippiWin");
        for (var i = 0; i < oldClippies.length; i++) {
            oldClippies[i].remove();
        }

        spawnClippi(wisdom);
    } else {
        bootEcho.println(wisdom);
        bootEcho.println(`
              /  \\
              |  |
              @  @
              |  |
              || |/
              || ||
              |\\_/|
              \\___/`);
    }
}

function lowRes() {
    var headHook = document.querySelector("head");
    var lowResCSS = '<link id="lowresCSS" rel="stylesheet" href="css/lowRes.css" />'
    headHook.innerHTML += lowResCSS;
}
function fullRes() {
    var lrCSSHook = document.querySelector("#lowresCSS");
    lrCSSHook.parentElement.removeChild(lrCSSHook);
}

function uptime() {
    var delta = Math.abs(bootTime - new Date()) / 1000;
    var days = Math.floor(delta / 86400);
    delta -= days * 86400;
    var hours = Math.floor(delta / 3600) % 24;
    delta -= hours * 3600;
    var minutes = Math.floor(delta / 60) % 60;
    delta -= minutes * 60;
    var seconds = Math.floor(delta % 60);

    result = "";
    if (days > 0) { result += days + "d " }
    if (hours > 0) { result += hours + "h " }
    if (minutes > 0) { result += minutes  + "m " }
    if (seconds > 0) { result += seconds + "s " }
    return result;
}
function updateClock() {
    if (mode == "gde"){
        document.getElementById('gde-clock').innerHTML = new Date().toLocaleTimeString();
    }
}

function loadFile(filePath) {
    var result = null;
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", filePath, false);
    xmlhttp.send();
    if (xmlhttp.status==200) {
        result = xmlhttp.responseText;
    }

    return result;
}

function slowText (echo, message, speed) {
    echo.print('\x9B2J\x9BH');
    for (var i = 0; i < message.length; i++) {
        setTimeout(function (c) {
            echo.print(c);
        }, i * speed, message[i]);
    }
}
